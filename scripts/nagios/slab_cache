#! /usr/bin/env python
import sys,datetime, fileinput, re, getopt


# 
# Copyright (c) 2010 GhostHunter
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of copyright holders nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL COPYRIGHT HOLDERS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


# volem mesurar el % de "slab cache" respecte al total de memoria
# MemTotal:      2097152 kB
# Slab:           310248 kB


def ok_message(value):
	print "SLAB  OK - used ("+value+"%)"
	sys.exit(0)

def warning_message(value):
	print "SLAB  WARNING - used ("+value+"%)"
	sys.exit(1)


def critical_message(value):
	print "SLAB  CRITICAL - used ("+value+"%)"
	sys.exit(2)


def usage():
	print """
Parametres incorrectes
Utilitzacio : ./slab_cache -w percent -c  percent
On,
	-w  Enter entre 0 i 100 en el que salta l'alarma warning
	-c  Enter entre 0 i 100 en el que salta l'alarma critical
	
	El parametre de critical SEMPRE ha de ser mes gran que el de warning
"""

def parse_cmd_line(): 
	warning=0
	critical=0
	
	try:
		options, args = getopt.getopt(sys.argv[1:], 'w:c:')
	except getopt.GetoptError:
	    usage()
	    sys.exit(3)
	
	if len(options) < 1:
		usage(); sys.exit(3)
	
	opts = {}
	try:
		for o, a in options:
			if int(a) > 100:
				usage(); sys.exit(3)
			opts[o] = int(a)
	# en cas que parametre donat no sigui enter, Excepcio
	except ValueError:
		usage(); sys.exit(3)
	if len (opts) < 2 :
		usage(); sys.exit(3)

	warning=opts['-w']
	critical=opts['-c']
	if warning >=critical:
		usage(); sys.exit(3)
	return warning, critical

MEMINFO="/proc/meminfo"
total=0
slab=0

warning=0
critical=0
	
warning,critical = parse_cmd_line()


total_pattern=re.compile("^MemTotal: +(\d{1,50}) kB$")
slab_pattern=re.compile("^Slab: +(\d{1,50}) kB$")

for line in fileinput.input(MEMINFO):
	match=total_pattern.match(line)
	if match!= None:
		total=int(match.group(1))

	match=slab_pattern.match(line)
	if match!= None:
		slab=int(match.group(1))

result = (100*slab)/total

if result < warning:
	ok_message(str(result))	

elif  warning <= result < critical:
	warning_message(str(result))	

else:
	critical_message(str(result))	
