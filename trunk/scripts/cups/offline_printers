#! /usr/bin/env python
# 
# Copyright (c) 2010 GhostHunter
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of copyright holders nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL COPYRIGHT HOLDERS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


import os
import re
import sys
from subprocess import *





def isPrinterDown(printer):
	pingCommand=['/bin/ping','-c','1','-W','1',printer]
	pingNoDNS=re.compile("^ping: unknown host")
	pingHostDown=re.compile("100% packet loss")

	strPingOutput=Popen(pingCommand,stdout=PIPE,stderr=STDOUT).communicate()[0]
	return pingNoDNS.search(strPingOutput)!=None or pingHostDown.search(strPingOutput)!=None

def getPrinterList():
	lpStatCommand=["/usr/bin/lpstat", "-v"]
	lpStatPattern=re.compile("device for (\w{1,}): ")
	strOutputLpStat=Popen(lpStatCommand,stdout=PIPE,stderr=None).communicate()[0]
	return lpStatPattern.findall(strOutputLpStat)


def main():
	reachable=filter(isPrinterDown,getPrinterList())
	if len(reachable) > 0: print "The following printers are not reachable:\n%s" %('\n'.join(reachable))

	return 0

if __name__ == "__main__":
        sys.exit(main())


