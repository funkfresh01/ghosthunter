## ~/.mutt/muttrc
set pager_index_lines=9
set from=foo@gmail.com
set realname="Mr. foo"
set reverse_name=yes
set reverse_realname=no
set imap_user = 'foo'
set spoolfile = imaps://imap.gmail.com:993/INBOX
set smtp_url="smtp://foo@smtp.gmail.com:587/"
set folder = "imaps://imap.gmail.com:993"
#set record=+sent-mail-`date +%Y`
set record="+[Gmail]/Sent Mail"
set postponed="+[Gmail]/Drafts"
# previously do:  mkdir -p ./cache/{headers,bodies}
set header_cache="./cache/headers"
set message_cachedir="./cache/bodies"
set move=no
set delete=yes 
set edit_hdrs
set include
set reply_to
set abort_nosubject=no
alternates '(username|altusername)([-+].*)?@.*'
set hdr_format="%4C %Z %{%m/%d} %-15.15F (%4c) %s" # format of the index

hdr_order From: Date: User-Agent: X-Mailer To: Cc: Reply-To: Subject:
ignore *
unignore From: Date: User-Agent: X-Mailer To: Cc: Reply-To: Subject:
my_hdr Reply-To:

# setup gmail filters to apply the corresp. labels:
mailboxes ! =[Gmail]/Drafts "=[Gmail]/All Mail"


ignore Originator X-Loop X-Mailing-List X-Listprocessor X-Face
ignore X-Received X-Mailer X-Envelope-To X-Sender X-Attribution
ignore DKIM-Signature DomainKey-Signature Authentication-Results
ignore List-Unsubscribe List-Archive List-Help List-Subscribe Received



set ispell="aspell --lang ca -c"

# address book

set query_command = "abook --mutt-query '%s'"
macro generic,index,pager \ca "<shell-escape>abook<return>" "launch abook"
macro index,pager A "<pipe-message>abook --add-email<return>" "add the sender address to abook"

set sort=threads # default sort messages by thread
set sort_browser=reverse-date # showing mbox list default to newest first
#set sort_aux=reverse-last-date-received # showing threads with youngest message last




bind editor     <delete>  delete-char

# Color / video attribute definitions. Not too flashy.
#


color  hdrdefault      green           black
color  header          brightyellow    black   "^from:"
mono   header          bold                    "^from:"
color  header          brightyellow    black   "^to:"
mono   header          bold                    "^to:"
color  header          brightyellow    black   "^date:"
mono   header          bold                    "^date:"
color  header          brightyellow    black   "^Delivered-To:"
mono   header          bold                    "^Delivered-To:"

color  header          red   black   		"^X-Bogosity: Yes"
mono   header          bold                    "^X-Bogosity: Yes"

color  header          brightyellow    black   "^subject:"
mono   header          bold                    "^subject:"
color  quoted          green           black
color  signature       brightred       black
color  indicator       brightyellow    red
color  error           brightred       black
mono   error           bold
color  status          brightwhite     blue
color  tree            brightmagenta   black
color  tilde           brightmagenta   black
# URL highlighting with the same regexp as urlview.
color  body            brightyellow    black (((ht|f)tps?)|mailto):(//)?[^\ "\t]*|www\.[-a-z0-9.]+)[^\ .,;\t>">]
mono   body            bold         (((ht|f)tps?)|mailto):(//)?[^\ "\t]*|www\.[-a-z0-9.]+)[^\ .,;\t>">]
color  body            brightmagenta   black   "[-a-z_0-9.]+@[-a-z_0-9.]+"
mono   body            bold                    "[-a-z_0-9.]+@[-a-z_0-9.]+"
color  body            brightyellow    black   "^Good signature"
mono   body            bold                    "^Good signature"
color  body            brightwhite     red     "^Bad signature from.*"
mono   body            bold                    "^Bad signature from.*"



#
# GNUPG
#
set pgp_autosign
set pgp_replysign
    # when you answer a signed message, the response message will be
    # signed too.

set pgp_replyencrypt

    # when you answer an encrypted message, the response message
    # will be encrypted too.

set pgp_verify_sig=yes

    # Do you want to automatically verify incoming signed messages?
    # Of course!

set pgp_timeout=600

    # delete pass phrase from the memory cache <n> seconds
    # after typing it.

set pgp_sign_as="0xXXXXXXXX"

set pgp_strict_enc

    # use "quoted-printable" when PGP requires it.

unset pgp_long_ids

    # Do not use 64 bits key ids, use 32 bits key ids.



# decode application/pgp
set pgp_decode_command="gpg --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"

# verify a pgp/mime signature
set pgp_verify_command="gpg --status-fd=2 --no-verbose --quiet --batch --output - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="gpg --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"

# create a pgp/mime signed attachment
# set pgp_sign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_sign_command="gpg --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
# set pgp_clearsign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"
set pgp_clearsign_command="gpg --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
# set pgp_encrypt_only_command="pgpewrap gpg-2comp -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_only_command="pgpewrap gpg --batch --quiet --no-verbose --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
# set pgp_encrypt_sign_command="pgpewrap gpg-2comp %?p?--passphrase-fd 0? -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_sign_command="pgpewrap gpg %?p?--passphrase-fd 0? --batch --quiet --no-verbose --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="gpg --no-verbose --import %f"

# export a key from the public key ring
set pgp_export_command="gpg --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="gpg --verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="gpg --no-verbose --batch --quiet --with-colons --list-keys %r" 

# read in the secret key ring
set pgp_list_secring_command="gpg --no-verbose --batch --quiet --with-colons --list-secret-keys %r" 

# fetch keys
# set pgp_getkeys_command="pkspxycwrap %r"

# pattern for good signature - may need to be adapted to locale!

# set pgp_good_sign="^gpgv?: Good signature from "

# OK, here's a version which uses gnupg's message catalog:
# set pgp_good_sign="`gettext -d gnupg -s 'Good signature from "' | tr -d '"'`"

# This version uses --status-fd messages
set pgp_good_sign="^\\[GNUPG:\\] GOODSIG"




set mailcap_path="~/.mailcap"

