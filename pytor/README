Pytor
-----
A very simple http connect back shell that connects to
a Tor hidden service.

It uses a http proxy to connect to the Tor network
without implementing the full protocol.


Disclaimer
----------
This is only a proof of concept and only can be used
with written permission and to test the security of
your own intrastructure.


Setup
-----

The python scripts are located in the src subdirectory.

* Generationg RSA keys
Before using this reverse shell, a new pair of keys must be
generated. This can be done by executing this script:
src/gen_rsa_keys.py. Once we have the keys, the variables
public and private in both scripts must be modified with
the new keys.

* Server: 
The user must install Tor in a computer and setup a hidden
service as described in the Tor manual.

http://www.torproject.org/docs/tor-hidden-service.html.en

Pytor will listen in 127.0.0.1:8080 for connections,
so Tor must be setup to send the requests to this port.

...
HiddenServicePort 80 127.0.0.1:8080
...


* Client:
Change:
- The variable called hidden_service for the hidden service
you configured in your computer.


Usage
-----
The server runs without parameters and it will prompt for
commands as soon as a client connects back. The client connects
just one time in case it is called without parameters, but
this behavior can be changed with the -c flag.

Use the command "quit" to finish the client execution.


Freezing Pytor
--------------
Execute 'make' in the main directory and the code will be
compiled and the binaries copied to the bin subdirectory.


Gotcha
------
The client may experience problems when connecting to the
server in case your Tor tunnel is too slow. It happens because
the proxy server has a low time out.
